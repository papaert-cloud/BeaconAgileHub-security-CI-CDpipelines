name: 🚀 Enterprise DevSecOps Master Orchestrator

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options: ['dev', 'staging', 'production']
      deployment_strategy:
        description: 'Deployment Strategy'
        required: true
        default: 'rolling'
        type: choice
        options: ['rolling', 'blue-green', 'canary']
      skip_security:
        description: 'Skip Security Gates (Emergency Only)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  orchestration-control:
    name: 🎯 Orchestration Control Plane
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      deployment-strategy: ${{ steps.determine-strategy.outputs.strategy }}
      security-required: ${{ steps.security-check.outputs.required }}
      cost-threshold: ${{ steps.cost-analysis.outputs.threshold }}
      compliance-required: ${{ steps.compliance-check.outputs.required }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🎯 Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> "${GITHUB_OUTPUT}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> "${GITHUB_OUTPUT}"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> "${GITHUB_OUTPUT}"
          else
            echo "environment=dev" >> "${GITHUB_OUTPUT}"
          fi

      - name: 🚀 Determine Deployment Strategy
        id: determine-strategy
        run: |
          ENV="${{ steps.determine-env.outputs.environment }}"
          if [[ "${{ github.event.inputs.deployment_strategy }}" != "" ]]; then
            echo "strategy=${{ github.event.inputs.deployment_strategy }}" >> "${GITHUB_OUTPUT}"
          elif [[ "$ENV" == "production" ]]; then
            echo "strategy=blue-green" >> "${GITHUB_OUTPUT}"
          elif [[ "$ENV" == "staging" ]]; then
            echo "strategy=canary" >> "${GITHUB_OUTPUT}"
          else
            echo "strategy=rolling" >> "${GITHUB_OUTPUT}"
          fi

      - name: 🔒 Security Requirements Check
        id: security-check
        run: |
          if [[ "${{ github.event.inputs.skip_security }}" == "true" ]]; then
            echo "required=false" >> "${GITHUB_OUTPUT}"
          else
            echo "required=true" >> "${GITHUB_OUTPUT}"
          fi

      - name: 💰 Cost Analysis Threshold
        id: cost-analysis
        run: |
          ENV="${{ steps.determine-env.outputs.environment }}"
          case $ENV in
            production) echo "threshold=1000" >> "${GITHUB_OUTPUT}" ;;
            staging) echo "threshold=500" >> "${GITHUB_OUTPUT}" ;;
            *) echo "threshold=100" >> "${GITHUB_OUTPUT}" ;;
          esac

      - name: 📋 Compliance Requirements
        id: compliance-check
        run: |
          ENV="${{ steps.determine-env.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            echo "required=true" >> "${GITHUB_OUTPUT}"
          else
            echo "required=false" >> "${GITHUB_OUTPUT}"
          fi

  security-orchestration:
    name: 🛡️ Security Orchestration
    needs: orchestration-control
    if: needs.orchestration-control.outputs.security-required == 'true'
    uses: ./.github/workflows/comprehensive-security.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
      compliance_required: ${{ needs.orchestration-control.outputs.compliance-required }}
    secrets: inherit

  infrastructure-orchestration:
    name: 🏗️ Infrastructure Orchestration
    needs: [orchestration-control, security-orchestration]
    if: always() && (needs.security-orchestration.result == 'success' || needs.orchestration-control.outputs.security-required == 'false')
    uses: ./.github/workflows/infrastructure-orchestrator.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
      cost_threshold: ${{ needs.orchestration-control.outputs.cost-threshold }}
    secrets: inherit

  application-orchestration:
    name: 🚀 Application Orchestration
    needs: [orchestration-control, security-orchestration, infrastructure-orchestration]
    if: always() && needs.infrastructure-orchestration.result == 'success'
    uses: ./.github/workflows/advanced-deployment.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
      strategy: ${{ needs.orchestration-control.outputs.deployment-strategy }}
    secrets: inherit

  testing-orchestration:
    name: 🧪 Testing Orchestration
    needs: [orchestration-control, application-orchestration]
    if: always() && needs.application-orchestration.result == 'success'
    uses: ./.github/workflows/comprehensive-testing.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
      deployment_strategy: ${{ needs.orchestration-control.outputs.deployment-strategy }}
    secrets: inherit

  monitoring-orchestration:
    name: 📊 Monitoring Orchestration
    needs: [orchestration-control, testing-orchestration]
    if: always() && needs.testing-orchestration.result == 'success'
    uses: ./.github/workflows/enterprise-monitoring.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
    secrets: inherit

  cost-optimization:
    name: 💰 Cost Optimization
    needs: [orchestration-control, monitoring-orchestration]
    if: always()
    uses: ./.github/workflows/cost-orchestrator.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
      threshold: ${{ needs.orchestration-control.outputs.cost-threshold }}
    secrets: inherit

  compliance-orchestration:
    name: 📋 Compliance Orchestration
    needs: [orchestration-control, monitoring-orchestration]
    if: needs.orchestration-control.outputs.compliance-required == 'true'
    uses: ./.github/workflows/compliance-orchestrator.yml
    with:
      environment: ${{ needs.orchestration-control.outputs.environment }}
    secrets: inherit

  orchestration-summary:
    name: 📈 Orchestration Summary
    needs: [
      orchestration-control,
      security-orchestration,
      infrastructure-orchestration,
      application-orchestration,
      testing-orchestration,
      monitoring-orchestration,
      cost-optimization,
      compliance-orchestration
    ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Generate Deployment Summary
        run: |
          echo "# 🚀 Enterprise DevSecOps Orchestration Summary" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "## 🎯 Deployment Details" >> "${GITHUB_STEP_SUMMARY}"
          echo "- **Environment**: ${{ needs.orchestration-control.outputs.environment }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- **Strategy**: ${{ needs.orchestration-control.outputs.deployment-strategy }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- **Security Gates**: ${{ needs.orchestration-control.outputs.security-required }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "- **Compliance Required**: ${{ needs.orchestration-control.outputs.compliance-required }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "" >> "${GITHUB_STEP_SUMMARY}"
          echo "## 📋 Pipeline Results" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Stage | Status |" >> "${GITHUB_STEP_SUMMARY}"
          echo "|-------|--------|" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Security | ${{ needs.security-orchestration.result || 'skipped' }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Infrastructure | ${{ needs.infrastructure-orchestration.result }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Application | ${{ needs.application-orchestration.result }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Testing | ${{ needs.testing-orchestration.result }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Monitoring | ${{ needs.monitoring-orchestration.result }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Cost Optimization | ${{ needs.cost-optimization.result }} |" >> "${GITHUB_STEP_SUMMARY}"
          echo "| Compliance | ${{ needs.compliance-orchestration.result || 'skipped' }} |" >> "${GITHUB_STEP_SUMMARY}"

      - name: ✅ Success Notification
        if: success()
        run: echo "::notice::Enterprise DevSecOps orchestration completed successfully!"
