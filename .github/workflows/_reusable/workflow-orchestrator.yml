name: üéº Workflow Orchestrator - Centralized Pipeline Management

# This is the master orchestrator that can trigger any workflow combination
# Use this for complex deployment scenarios and cross-repository workflows

on:
  workflow_dispatch:
    inputs:
      # === ORCHESTRATION CONFIGURATION ===
      orchestration_mode:
        description: 'Orchestration Mode'
        required: true
        default: 'full-pipeline'
        type: choice
        options: 
          - 'security-only'           # Run only security scans
          - 'ci-only'                 # Run only CI pipeline  
          - 'cd-only'                 # Run only CD pipeline
          - 'full-pipeline'           # Run complete CI/CD pipeline
          - 'cross-repo-sync'         # Sync workflows across repositories
          - 'emergency-deploy'        # Emergency deployment with minimal checks
          - 'rollback'                # Rollback to previous deployment
          - 'disaster-recovery'       # Disaster recovery procedures
      
      # === TARGET CONFIGURATION ===
      target_environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options: ['dev', 'staging', 'production']
      
      target_repository:
        description: 'Target Repository (leave empty for current)'
        required: false
        type: string
        default: ''
      
      # === SECURITY CONFIGURATION ===
      security_level:
        description: 'Security Validation Level'
        required: true
        default: 'standard'
        type: choice
        options:
          - 'minimal'     # Basic security checks only
          - 'standard'    # Standard security validation
          - 'enhanced'    # Full security suite with all tools
          - 'compliance'  # Compliance-focused validation (SLSA, SSDF, CIS)
      
      security_tools:
        description: 'Security Tools (comma-separated)'
        required: false
        default: 'kics,checkov,trivy'
        type: string
      
      fail_on_security:
        description: 'Fail Pipeline on Security Issues'
        required: false
        type: boolean
        default: false
      
      # === DEPLOYMENT CONFIGURATION ===
      deployment_strategy:
        description: 'Deployment Strategy'
        required: false
        default: 'rolling'
        type: choice
        options:
          - 'rolling'           # Rolling deployment (default)
          - 'blue-green'        # Blue-green deployment
          - 'canary'            # Canary deployment
          - 'recreate'          # Recreate deployment
          - 'manual-approval'   # Manual approval required
      
      deployment_targets:
        description: 'Deployment Targets (comma-separated)'
        required: false
        default: 'vps'
        type: string
      
      # === ADVANCED OPTIONS ===
      enable_monitoring:
        description: 'Enable Post-deployment Monitoring'
        required: false
        type: boolean
        default: true
      
      enable_notifications:
        description: 'Enable Notifications (Slack/Email)'
        required: false
        type: boolean
        default: true
      
      dry_run:
        description: 'Dry Run Mode (validate without execution)'
        required: false
        type: boolean
        default: false
      
      custom_parameters:
        description: 'Custom Parameters (JSON format)'
        required: false
        type: string
        default: '{}'

# Concurrency control for orchestration
concurrency:
  group: orchestrator-${{ inputs.target_environment }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel orchestration workflows

# Environment variables for orchestration
env:
  # === ORCHESTRATION SETTINGS ===
  ORCHESTRATION_MODE: ${{ inputs.orchestration_mode }}
  TARGET_ENVIRONMENT: ${{ inputs.target_environment }}
  TARGET_REPOSITORY: ${{ inputs.target_repository || github.repository }}
  
  # === SECURITY SETTINGS ===
  SECURITY_LEVEL: ${{ inputs.security_level }}
  SECURITY_TOOLS: ${{ inputs.security_tools || 'kics,checkov,trivy' }}
  FAIL_ON_SECURITY: ${{ inputs.fail_on_security || 'false' }}
  
  # === DEPLOYMENT SETTINGS ===
  DEPLOYMENT_STRATEGY: ${{ inputs.deployment_strategy || 'rolling' }}
  DEPLOYMENT_TARGETS: ${{ inputs.deployment_targets || 'vps' }}
  
  # === OPERATIONAL SETTINGS ===
  ENABLE_MONITORING: ${{ inputs.enable_monitoring || 'true' }}
  ENABLE_NOTIFICATIONS: ${{ inputs.enable_notifications || 'true' }}
  DRY_RUN: ${{ inputs.dry_run || 'false' }}
  
  # === ORCHESTRATION METADATA ===
  ORCHESTRATION_ID: ${{ github.run_number }}-$(date +%Y%m%d-%H%M%S)
  ORCHESTRATION_TIMESTAMP: $(date -u +%Y-%m-%dT%H:%M:%SZ)

permissions:
  contents: read
  actions: write
  packages: read
  id-token: write
  security-events: write
  deployments: write

jobs:
  # === ORCHESTRATION PLANNING ===
  orchestration-planning:
    name: üó∫Ô∏è Orchestration Planning & Validation
    runs-on: ubuntu-22.04
    
    outputs:
      execution-plan: ${{ steps.planning.outputs.execution-plan }}
      security-required: ${{ steps.planning.outputs.security-required }}
      ci-required: ${{ steps.planning.outputs.ci-required }}
      cd-required: ${{ steps.planning.outputs.cd-required }}
      cross-repo-required: ${{ steps.planning.outputs.cross-repo-required }}
      validated: ${{ steps.planning.outputs.validated }}
    
    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        
      - name: üó∫Ô∏è Create Execution Plan
        id: planning
        run: |
          echo "üó∫Ô∏è Creating orchestration execution plan..."
          
          # Initialize execution flags
          SECURITY_REQUIRED="false"
          CI_REQUIRED="false"
          CD_REQUIRED="false"
          CROSS_REPO_REQUIRED="false"
          VALIDATED="true"
          
          # Parse orchestration mode and set execution flags
          case "${{ env.ORCHESTRATION_MODE }}" in
            "security-only")
              SECURITY_REQUIRED="true"
              ;;
            "ci-only")
              SECURITY_REQUIRED="true"  # Security is always part of CI
              CI_REQUIRED="true"
              ;;
            "cd-only")
              SECURITY_REQUIRED="true"  # Security validation before deployment
              CD_REQUIRED="true"
              ;;
            "full-pipeline")
              SECURITY_REQUIRED="true"
              CI_REQUIRED="true"
              CD_REQUIRED="true"
              ;;
            "cross-repo-sync")
              CROSS_REPO_REQUIRED="true"
              ;;
            "emergency-deploy")
              CD_REQUIRED="true"
              # Skip security for emergency (not recommended)
              ;;
            "rollback")
              CD_REQUIRED="true"
              # Rollback-specific logic
              ;;
            "disaster-recovery")
              SECURITY_REQUIRED="true"
              CI_REQUIRED="true"
              CD_REQUIRED="true"
              CROSS_REPO_REQUIRED="true"
              ;;
            *)
              echo "‚ùå Invalid orchestration mode: ${{ env.ORCHESTRATION_MODE }}"
              VALIDATED="false"
              ;;
          esac
          
          # Validate target environment
          case "${{ env.TARGET_ENVIRONMENT }}" in
            "production")
              # Production requires enhanced security
              if [ "${{ env.SECURITY_LEVEL }}" = "minimal" ]; then
                echo "‚ùå Production deployments require at least 'standard' security level"
                VALIDATED="false"
              fi
              ;;
          esac
          
          # Validate custom parameters if provided
          CUSTOM_PARAMS='${{ inputs.custom_parameters }}'
          if [ "$CUSTOM_PARAMS" != "{}" ]; then
            echo "Custom parameters provided: $CUSTOM_PARAMS"
            # Validate JSON format
            echo "$CUSTOM_PARAMS" | jq . > /dev/null || {
              echo "‚ùå Invalid JSON format in custom parameters"
              VALIDATED="false"
            }
          fi
          
          # Create execution plan
          EXECUTION_PLAN=$(cat << EOF
          {
            "orchestration_id": "${{ env.ORCHESTRATION_ID }}",
            "mode": "${{ env.ORCHESTRATION_MODE }}",
            "environment": "${{ env.TARGET_ENVIRONMENT }}",
            "repository": "${{ env.TARGET_REPOSITORY }}",
            "security_level": "${{ env.SECURITY_LEVEL }}",
            "deployment_strategy": "${{ env.DEPLOYMENT_STRATEGY }}",
            "dry_run": ${{ env.DRY_RUN }},
            "timestamp": "${{ env.ORCHESTRATION_TIMESTAMP }}",
            "phases": {
              "security": $SECURITY_REQUIRED,
              "ci": $CI_REQUIRED,
              "cd": $CD_REQUIRED,
              "cross_repo": $CROSS_REPO_REQUIRED
            }
          }
          EOF
          )
          
          echo "Execution Plan: $EXECUTION_PLAN"
          
          # Set outputs
          echo "execution-plan=$EXECUTION_PLAN" >> $GITHUB_OUTPUT
          echo "security-required=$SECURITY_REQUIRED" >> $GITHUB_OUTPUT
          echo "ci-required=$CI_REQUIRED" >> $GITHUB_OUTPUT
          echo "cd-required=$CD_REQUIRED" >> $GITHUB_OUTPUT
          echo "cross-repo-required=$CROSS_REPO_REQUIRED" >> $GITHUB_OUTPUT
          echo "validated=$VALIDATED" >> $GITHUB_OUTPUT
          
          # Generate planning summary
          echo "# üó∫Ô∏è Orchestration Execution Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üóúÔ∏è Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Orchestration ID**: ${{ env.ORCHESTRATION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ env.ORCHESTRATION_MODE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.TARGET_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.TARGET_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Level**: ${{ env.SECURITY_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Strategy**: ${{ env.DEPLOYMENT_STRATEGY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ env.DRY_RUN }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üó∫Ô∏è Execution Phases" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Validation**: $([ "$SECURITY_REQUIRED" = "true" ] && echo "‚úÖ Enabled" || echo "‚è∏Ô∏è Skipped")" >> $GITHUB_STEP_SUMMARY
          echo "- **CI Pipeline**: $([ "$CI_REQUIRED" = "true" ] && echo "‚úÖ Enabled" || echo "‚è∏Ô∏è Skipped")" >> $GITHUB_STEP_SUMMARY
          echo "- **CD Pipeline**: $([ "$CD_REQUIRED" = "true" ] && echo "‚úÖ Enabled" || echo "‚è∏Ô∏è Skipped")" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-Repository**: $([ "$CROSS_REPO_REQUIRED" = "true" ] && echo "‚úÖ Enabled" || echo "‚è∏Ô∏è Skipped")" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VALIDATED" != "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚ùå Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "Orchestration validation failed. Check configuration and try again." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # === SECURITY PHASE ===
  security-orchestration:
    name: üõ°Ô∏è Security Orchestration
    needs: orchestration-planning
    if: needs.orchestration-planning.outputs.security-required == 'true' && needs.orchestration-planning.outputs.validated == 'true'
    uses: ./.github/workflows/enhanced-security-gates.yml
    with:
      environment: ${{ env.TARGET_ENVIRONMENT }}
      severity_threshold: ${{ env.SECURITY_LEVEL == 'minimal' && 'low' || env.SECURITY_LEVEL == 'standard' && 'medium' || 'high' }}
      enable_sbom: ${{ env.SECURITY_LEVEL != 'minimal' }}
      fail_on_severity: ${{ env.FAIL_ON_SECURITY == 'true' }}
      scan_tools: ${{ env.SECURITY_TOOLS }}
    secrets:
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # === CI PHASE ===
  ci-orchestration:
    name: üîÑ CI Orchestration
    needs: [orchestration-planning, security-orchestration]
    if: always() && needs.orchestration-planning.outputs.ci-required == 'true' && needs.orchestration-planning.outputs.validated == 'true' && (needs.security-orchestration.result == 'success' || needs.security-orchestration.result == 'skipped')
    uses: ./.github/workflows/enhanced-ci-pipeline.yml
    secrets: inherit

  # === CD PHASE ===
  cd-orchestration:
    name: üöÄ CD Orchestration
    needs: [orchestration-planning, security-orchestration, ci-orchestration]
    if: always() && needs.orchestration-planning.outputs.cd-required == 'true' && needs.orchestration-planning.outputs.validated == 'true' && (needs.ci-orchestration.result == 'success' || needs.ci-orchestration.result == 'skipped')
    uses: ./.github/workflows/enhanced-cd-pipeline.yml
    with:
      environment: ${{ env.TARGET_ENVIRONMENT }}
      deployment_target: ${{ env.DEPLOYMENT_TARGETS }}
      skip_security_validation: ${{ needs.security-orchestration.result == 'success' }}
      enable_blue_green: ${{ env.DEPLOYMENT_STRATEGY == 'blue-green' }}
      rollback_on_failure: true
    secrets: inherit

  # === CROSS-REPOSITORY SYNCHRONIZATION ===
  cross-repo-sync:
    name: üîÑ Cross-Repository Synchronization
    needs: orchestration-planning
    if: needs.orchestration-planning.outputs.cross-repo-required == 'true' && needs.orchestration-planning.outputs.validated == 'true'
    runs-on: ubuntu-22.04
    
    steps:
      - name: üîÑ Checkout Current Repository
        uses: actions/checkout@v4
        
      - name: üîÑ Cross-Repository Workflow Sync
        run: |
          echo "üîÑ Synchronizing workflows across repositories..."
          
          # Define target repositories for synchronization
          TARGET_REPOS=(
            "papaert-cloud/enterprise-devsecops-superlab"
            # Add more repositories as needed
          )
          
          # Files to synchronize
          SYNC_FILES=(
            ".github/workflows/enhanced-security-gates.yml"
            ".github/workflows/_reusable/workflow-orchestrator.yml"
          )
          
          echo "Target repositories: ${TARGET_REPOS[@]}"
          echo "Files to sync: ${SYNC_FILES[@]}"
          
          if [ "${{ env.DRY_RUN }}" = "true" ]; then
            echo "DRY RUN: Would sync workflows but not executing due to dry-run mode"
          else
            echo "Cross-repository synchronization would be implemented here"
            # Implementation would use GitHub API to:
            # 1. Read workflow files from current repo
            # 2. Create/update files in target repositories
            # 3. Create pull requests for review
          fi
          
      - name: üóúÔ∏è Generate Sync Report
        run: |
          echo "# üîÑ Cross-Repository Sync Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üóúÔ∏è Sync Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: $([ "${{ env.DRY_RUN }}" = "true" ] && echo "Dry Run" || echo "Live Sync")" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Repositories**: 1" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Synchronized**: 2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üóúÔ∏è Implementation Status" >> $GITHUB_STEP_SUMMARY
          echo "üöß **Coming Soon**: Full cross-repository synchronization will be implemented" >> $GITHUB_STEP_SUMMARY

  # === ORCHESTRATION SUMMARY ===
  orchestration-summary:
    name: üìä Orchestration Summary & Reporting
    needs: [orchestration-planning, security-orchestration, ci-orchestration, cd-orchestration, cross-repo-sync]
    if: always() && needs.orchestration-planning.outputs.validated == 'true'
    runs-on: ubuntu-22.04
    
    steps:
      - name: üìä Generate Comprehensive Orchestration Report
        run: |
          echo "# üéº Workflow Orchestration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üóúÔ∏è Orchestration Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Orchestration ID**: ${{ env.ORCHESTRATION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ env.ORCHESTRATION_MODE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.TARGET_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.TARGET_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üóúÔ∏è Phase Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Enabled | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Security phase
          if [ "${{ needs.orchestration-planning.outputs.security-required }}" = "true" ]; then
            STATUS="${{ needs.security-orchestration.result }}"
            ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
            echo "| Security Validation | ‚úÖ Yes | $ICON $STATUS | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Validation | ‚è∏Ô∏è No | - | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # CI phase
          if [ "${{ needs.orchestration-planning.outputs.ci-required }}" = "true" ]; then
            STATUS="${{ needs.ci-orchestration.result }}"
            ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
            echo "| CI Pipeline | ‚úÖ Yes | $ICON $STATUS | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CI Pipeline | ‚è∏Ô∏è No | - | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # CD phase
          if [ "${{ needs.orchestration-planning.outputs.cd-required }}" = "true" ]; then
            STATUS="${{ needs.cd-orchestration.result }}"
            ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
            echo "| CD Pipeline | ‚úÖ Yes | $ICON $STATUS | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CD Pipeline | ‚è∏Ô∏è No | - | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Cross-repo phase
          if [ "${{ needs.orchestration-planning.outputs.cross-repo-required }}" = "true" ]; then
            STATUS="${{ needs.cross-repo-sync.result }}"
            ICON=$([ "$STATUS" = "success" ] && echo "‚úÖ" || echo "‚ùå")
            echo "| Cross-Repository Sync | ‚úÖ Yes | $ICON $STATUS | - |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Cross-Repository Sync | ‚è∏Ô∏è No | - | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall success
          OVERALL_SUCCESS="true"
          
          # Check critical failures
          if [ "${{ needs.orchestration-planning.outputs.security-required }}" = "true" ] && [ "${{ needs.security-orchestration.result }}" = "failure" ]; then
            OVERALL_SUCCESS="false"
          fi
          
          if [ "${{ needs.orchestration-planning.outputs.ci-required }}" = "true" ] && [ "${{ needs.ci-orchestration.result }}" = "failure" ]; then
            OVERALL_SUCCESS="false"
          fi
          
          if [ "${{ needs.orchestration-planning.outputs.cd-required }}" = "true" ] && [ "${{ needs.cd-orchestration.result }}" = "failure" ]; then
            OVERALL_SUCCESS="false"
          fi
          
          echo "## üéØ Orchestration Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$OVERALL_SUCCESS" = "true" ]; then
            echo "‚úÖ **Orchestration Completed Successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All enabled phases completed successfully. The orchestration is complete." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Orchestration Failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more critical phases failed. Review the results and take corrective action." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: üìß Send Orchestration Notifications
        if: env.ENABLE_NOTIFICATIONS == 'true'
        run: |
          echo "üìß Sending orchestration notifications..."
          
          # Placeholder for notification logic
          # This would integrate with:
          # - Slack webhooks
          # - Email notifications
          # - Microsoft Teams
          # - PagerDuty
          # - Custom webhooks
          
          echo "Orchestration notifications sent (placeholder implementation)"