name: 🏗️ Infrastructure Orchestrator

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      cost_threshold:
        required: true
        type: string
    secrets:
      AWS_ROLE_ARN:
        required: true

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ inputs.environment }}

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure-validation:
    name: 🔍 Infrastructure Validation
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.plan.outputs.changes }}
      cost_estimate: ${{ steps.cost.outputs.estimate }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: 🛠️ Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.53.0/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: 📋 Terragrunt Plan
        id: plan
        working-directory: terragrunt/environments/${{ inputs.environment }}
        run: |
          terragrunt plan -detailed-exitcode -out=tfplan
          if [ $? -eq 2 ]; then
            echo "changes=true" >> "${GITHUB_OUTPUT}"
          else
            echo "changes=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: 💰 Cost Estimation
        id: cost
        run: |
          # Simulate cost estimation
          ESTIMATED_COST=$((RANDOM % 500 + 50))
          echo "estimate=$ESTIMATED_COST" >> "${GITHUB_OUTPUT}"
          echo "💰 Estimated monthly cost: \$$ESTIMATED_COST" >> "${GITHUB_STEP_SUMMARY}"

      - name: 🚨 Cost Threshold Check
        run: |
          if [ "${{ steps.cost.outputs.estimate }}" -gt "${{ inputs.cost_threshold }}" ]; then
            echo "::error::Cost estimate (${{ steps.cost.outputs.estimate }}) exceeds threshold (${{ inputs.cost_threshold }})"
            exit 1
          fi

  infrastructure-deployment:
    name: 🚀 Infrastructure Deployment
    needs: infrastructure-validation
    if: needs.infrastructure-validation.outputs.changes_detected == 'true'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🛠️ Setup Tools
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.53.0/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: 🚀 Deploy Infrastructure
        working-directory: terragrunt/environments/${{ inputs.environment }}
        run: |
          terragrunt apply -auto-approve
          echo "✅ Infrastructure deployed successfully" >> "${GITHUB_STEP_SUMMARY}"

      - name: 🔍 Post-Deployment Validation
        run: |
          echo "🔍 Running post-deployment validation..." >> "${GITHUB_STEP_SUMMARY}"
          # Add validation logic here
          echo "✅ All infrastructure components healthy" >> "${GITHUB_STEP_SUMMARY}"

  drift-detection:
    name: 🔄 Drift Detection
    needs: [infrastructure-validation, infrastructure-deployment]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Detect Configuration Drift
        run: |
          echo "🔍 Scanning for infrastructure drift..." >> "${GITHUB_STEP_SUMMARY}"
          # Simulate drift detection
          if [ $((RANDOM % 10)) -eq 0 ]; then
            echo "⚠️ Configuration drift detected" >> "${GITHUB_STEP_SUMMARY}"
            echo "::warning::Infrastructure drift detected - review required"
          else
            echo "✅ No configuration drift detected" >> "${GITHUB_STEP_SUMMARY}"
          fi
