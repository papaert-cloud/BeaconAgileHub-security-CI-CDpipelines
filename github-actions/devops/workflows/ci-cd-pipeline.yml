# DevOps Pipeline: Focus on Speed, Reliability, and Deployment Efficiency
name: DevOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options: [staging, production]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  APP_NAME: "nexus-app"
  BUILD_NUMBER: ${{ github.run_number }}
  
permissions:
  id-token: write
  contents: read
  packages: write
  actions: read

jobs:
  build-and-test:
    name: Build & Test Application
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Run Unit Tests
      run: |
        go mod download
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=build-${{ env.BUILD_NUMBER }}
          
    - name: Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  infrastructure:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Operations
      working-directory: ./terraform/environments/staging
      run: |
        terraform init -backend-config="bucket=${{ vars.TERRAFORM_STATE_BUCKET }}"
        terraform plan -var="app_name=${{ env.APP_NAME }}" -out=tfplan
        terraform apply -auto-approve tfplan
        
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build-and-test, infrastructure]
    environment: 
      name: ${{ github.event.inputs.environment || 'staging' }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to Kubernetes
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.APP_NAME }}-cluster
        export IMAGE_TAG="${{ needs.build-and-test.outputs.image-tag }}"
        envsubst < k8s/deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/${{ env.APP_NAME }} --timeout=300s